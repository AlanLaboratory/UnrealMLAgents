// Copyright Â© 2025 Stephane Capponi and individual contributors. All Rights Reserved.

#pragma warning(disable : 4100 4127 4267 4324)

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ueagents_envs/communicator_objects/agent_info.proto

#include "ueagents_envs/communicator_objects/agent_info.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace communicator_objects {
template <typename>
PROTOBUF_CONSTEXPR AgentInfoProto::AgentInfoProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.action_mask_)*/ {}

  , /*decltype(_impl_.observations_)*/{}
  , /*decltype(_impl_.reward_)*/ 0

  , /*decltype(_impl_.done_)*/ false

  , /*decltype(_impl_.max_step_reached_)*/ false

  , /*decltype(_impl_.id_)*/ 0

  , /*decltype(_impl_.group_id_)*/ 0

  , /*decltype(_impl_.group_reward_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AgentInfoProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AgentInfoProtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AgentInfoProtoDefaultTypeInternal() {}
  union {
    AgentInfoProto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AgentInfoProtoDefaultTypeInternal _AgentInfoProto_default_instance_;
}  // namespace communicator_objects
static ::_pb::Metadata file_level_metadata_ueagents_5fenvs_2fcommunicator_5fobjects_2fagent_5finfo_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_ueagents_5fenvs_2fcommunicator_5fobjects_2fagent_5finfo_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_ueagents_5fenvs_2fcommunicator_5fobjects_2fagent_5finfo_2eproto = nullptr;
const ::uint32_t TableStruct_ueagents_5fenvs_2fcommunicator_5fobjects_2fagent_5finfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::communicator_objects::AgentInfoProto, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::communicator_objects::AgentInfoProto, _impl_.reward_),
    PROTOBUF_FIELD_OFFSET(::communicator_objects::AgentInfoProto, _impl_.done_),
    PROTOBUF_FIELD_OFFSET(::communicator_objects::AgentInfoProto, _impl_.max_step_reached_),
    PROTOBUF_FIELD_OFFSET(::communicator_objects::AgentInfoProto, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::communicator_objects::AgentInfoProto, _impl_.action_mask_),
    PROTOBUF_FIELD_OFFSET(::communicator_objects::AgentInfoProto, _impl_.observations_),
    PROTOBUF_FIELD_OFFSET(::communicator_objects::AgentInfoProto, _impl_.group_id_),
    PROTOBUF_FIELD_OFFSET(::communicator_objects::AgentInfoProto, _impl_.group_reward_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::communicator_objects::AgentInfoProto)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::communicator_objects::_AgentInfoProto_default_instance_._instance,
};
const char descriptor_table_protodef_ueagents_5fenvs_2fcommunicator_5fobjects_2fagent_5finfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n3ueagents_envs/communicator_objects/age"
    "nt_info.proto\022\024communicator_objects\0324uea"
    "gents_envs/communicator_objects/observat"
    "ion.proto\"\317\001\n\016AgentInfoProto\022\016\n\006reward\030\001"
    " \001(\002\022\014\n\004done\030\002 \001(\010\022\030\n\020max_step_reached\030\003"
    " \001(\010\022\n\n\002id\030\004 \001(\005\022\023\n\013action_mask\030\005 \003(\010\022<\n"
    "\014observations\030\006 \003(\0132&.communicator_objec"
    "ts.ObservationProto\022\020\n\010group_id\030\007 \001(\005\022\024\n"
    "\014group_reward\030\010 \001(\002b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_ueagents_5fenvs_2fcommunicator_5fobjects_2fagent_5finfo_2eproto_deps[1] =
    {
        &::descriptor_table_ueagents_5fenvs_2fcommunicator_5fobjects_2fobservation_2eproto,
};
static ::absl::once_flag descriptor_table_ueagents_5fenvs_2fcommunicator_5fobjects_2fagent_5finfo_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ueagents_5fenvs_2fcommunicator_5fobjects_2fagent_5finfo_2eproto = {
    false,
    false,
    347,
    descriptor_table_protodef_ueagents_5fenvs_2fcommunicator_5fobjects_2fagent_5finfo_2eproto,
    "ueagents_envs/communicator_objects/agent_info.proto",
    &descriptor_table_ueagents_5fenvs_2fcommunicator_5fobjects_2fagent_5finfo_2eproto_once,
    descriptor_table_ueagents_5fenvs_2fcommunicator_5fobjects_2fagent_5finfo_2eproto_deps,
    1,
    1,
    schemas,
    file_default_instances,
    TableStruct_ueagents_5fenvs_2fcommunicator_5fobjects_2fagent_5finfo_2eproto::offsets,
    file_level_metadata_ueagents_5fenvs_2fcommunicator_5fobjects_2fagent_5finfo_2eproto,
    file_level_enum_descriptors_ueagents_5fenvs_2fcommunicator_5fobjects_2fagent_5finfo_2eproto,
    file_level_service_descriptors_ueagents_5fenvs_2fcommunicator_5fobjects_2fagent_5finfo_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ueagents_5fenvs_2fcommunicator_5fobjects_2fagent_5finfo_2eproto_getter() {
  return &descriptor_table_ueagents_5fenvs_2fcommunicator_5fobjects_2fagent_5finfo_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ueagents_5fenvs_2fcommunicator_5fobjects_2fagent_5finfo_2eproto(&descriptor_table_ueagents_5fenvs_2fcommunicator_5fobjects_2fagent_5finfo_2eproto);
namespace communicator_objects {
// ===================================================================

class AgentInfoProto::_Internal {
 public:
};

void AgentInfoProto::clear_observations() {
  _internal_mutable_observations()->Clear();
}
AgentInfoProto::AgentInfoProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:communicator_objects.AgentInfoProto)
}
AgentInfoProto::AgentInfoProto(const AgentInfoProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AgentInfoProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.action_mask_) { from._impl_.action_mask_ }

    , decltype(_impl_.observations_){from._impl_.observations_}
    , decltype(_impl_.reward_) {}

    , decltype(_impl_.done_) {}

    , decltype(_impl_.max_step_reached_) {}

    , decltype(_impl_.id_) {}

    , decltype(_impl_.group_id_) {}

    , decltype(_impl_.group_reward_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.reward_, &from._impl_.reward_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.group_reward_) -
    reinterpret_cast<char*>(&_impl_.reward_)) + sizeof(_impl_.group_reward_));
  // @@protoc_insertion_point(copy_constructor:communicator_objects.AgentInfoProto)
}

inline void AgentInfoProto::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.action_mask_) { arena }

    , decltype(_impl_.observations_){arena}
    , decltype(_impl_.reward_) { 0 }

    , decltype(_impl_.done_) { false }

    , decltype(_impl_.max_step_reached_) { false }

    , decltype(_impl_.id_) { 0 }

    , decltype(_impl_.group_id_) { 0 }

    , decltype(_impl_.group_reward_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AgentInfoProto::~AgentInfoProto() {
  // @@protoc_insertion_point(destructor:communicator_objects.AgentInfoProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AgentInfoProto::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.action_mask_.~RepeatedField();
  _internal_mutable_observations()->~RepeatedPtrField();
}

void AgentInfoProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AgentInfoProto::Clear() {
// @@protoc_insertion_point(message_clear_start:communicator_objects.AgentInfoProto)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_action_mask()->Clear();
  _internal_mutable_observations()->Clear();
  ::memset(&_impl_.reward_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.group_reward_) -
      reinterpret_cast<char*>(&_impl_.reward_)) + sizeof(_impl_.group_reward_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AgentInfoProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float reward = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 13)) {
          _impl_.reward_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool done = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          #pragma warning(disable: 4800)
          _impl_.done_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool max_step_reached = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.max_step_reached_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated bool action_mask = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_action_mask(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 40) {
          _internal_add_action_mask(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .communicator_objects.ObservationProto observations = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_observations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 group_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _impl_.group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // float group_reward = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 69)) {
          _impl_.group_reward_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AgentInfoProto::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:communicator_objects.AgentInfoProto)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float reward = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_reward = this->_internal_reward();
  ::uint32_t raw_reward;
  memcpy(&raw_reward, &tmp_reward, sizeof(tmp_reward));
  if (raw_reward != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_reward(), target);
  }

  // bool done = 2;
  if (this->_internal_done() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_done(), target);
  }

  // bool max_step_reached = 3;
  if (this->_internal_max_step_reached() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_max_step_reached(), target);
  }

  // int32 id = 4;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_id(), target);
  }

  // repeated bool action_mask = 5;
  if (this->_internal_action_mask_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_action_mask(), target);
  }

  // repeated .communicator_objects.ObservationProto observations = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_observations_size()); i < n; i++) {
    const auto& repfield = this->_internal_observations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 group_id = 7;
  if (this->_internal_group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        7, this->_internal_group_id(), target);
  }

  // float group_reward = 8;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_group_reward = this->_internal_group_reward();
  ::uint32_t raw_group_reward;
  memcpy(&raw_group_reward, &tmp_group_reward, sizeof(tmp_group_reward));
  if (raw_group_reward != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        8, this->_internal_group_reward(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:communicator_objects.AgentInfoProto)
  return target;
}

::size_t AgentInfoProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:communicator_objects.AgentInfoProto)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bool action_mask = 5;
  {
    std::size_t data_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_action_mask_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // repeated .communicator_objects.ObservationProto observations = 6;
  total_size += 1UL * this->_internal_observations_size();
  for (const auto& msg : this->_internal_observations()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // float reward = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_reward = this->_internal_reward();
  ::uint32_t raw_reward;
  memcpy(&raw_reward, &tmp_reward, sizeof(tmp_reward));
  if (raw_reward != 0) {
    total_size += 5;
  }

  // bool done = 2;
  if (this->_internal_done() != 0) {
    total_size += 2;
  }

  // bool max_step_reached = 3;
  if (this->_internal_max_step_reached() != 0) {
    total_size += 2;
  }

  // int32 id = 4;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  // int32 group_id = 7;
  if (this->_internal_group_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_group_id());
  }

  // float group_reward = 8;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_group_reward = this->_internal_group_reward();
  ::uint32_t raw_group_reward;
  memcpy(&raw_group_reward, &tmp_group_reward, sizeof(tmp_group_reward));
  if (raw_group_reward != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AgentInfoProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AgentInfoProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AgentInfoProto::GetClassData() const { return &_class_data_; }


void AgentInfoProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AgentInfoProto*>(&to_msg);
  auto& from = static_cast<const AgentInfoProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:communicator_objects.AgentInfoProto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.action_mask_.MergeFrom(from._impl_.action_mask_);
  _this->_internal_mutable_observations()->MergeFrom(from._internal_observations());
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_reward = from._internal_reward();
  ::uint32_t raw_reward;
  memcpy(&raw_reward, &tmp_reward, sizeof(tmp_reward));
  if (raw_reward != 0) {
    _this->_internal_set_reward(from._internal_reward());
  }
  if (from._internal_done() != 0) {
    _this->_internal_set_done(from._internal_done());
  }
  if (from._internal_max_step_reached() != 0) {
    _this->_internal_set_max_step_reached(from._internal_max_step_reached());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_group_id() != 0) {
    _this->_internal_set_group_id(from._internal_group_id());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_group_reward = from._internal_group_reward();
  ::uint32_t raw_group_reward;
  memcpy(&raw_group_reward, &tmp_group_reward, sizeof(tmp_group_reward));
  if (raw_group_reward != 0) {
    _this->_internal_set_group_reward(from._internal_group_reward());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AgentInfoProto::CopyFrom(const AgentInfoProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:communicator_objects.AgentInfoProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentInfoProto::IsInitialized() const {
  return true;
}

void AgentInfoProto::InternalSwap(AgentInfoProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.action_mask_.InternalSwap(&other->_impl_.action_mask_);
  _internal_mutable_observations()->InternalSwap(other->_internal_mutable_observations());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AgentInfoProto, _impl_.group_reward_)
      + sizeof(AgentInfoProto::_impl_.group_reward_)
      - PROTOBUF_FIELD_OFFSET(AgentInfoProto, _impl_.reward_)>(
          reinterpret_cast<char*>(&_impl_.reward_),
          reinterpret_cast<char*>(&other->_impl_.reward_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AgentInfoProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ueagents_5fenvs_2fcommunicator_5fobjects_2fagent_5finfo_2eproto_getter, &descriptor_table_ueagents_5fenvs_2fcommunicator_5fobjects_2fagent_5finfo_2eproto_once,
      file_level_metadata_ueagents_5fenvs_2fcommunicator_5fobjects_2fagent_5finfo_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace communicator_objects
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::communicator_objects::AgentInfoProto*
Arena::CreateMaybeMessage< ::communicator_objects::AgentInfoProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::communicator_objects::AgentInfoProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
