// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ueagents_envs/communicator_objects/unreal_to_external.proto
#ifndef GRPC_ueagents_5fenvs_2fcommunicator_5fobjects_2funreal_5fto_5fexternal_2eproto__INCLUDED
#define GRPC_ueagents_5fenvs_2fcommunicator_5fobjects_2funreal_5fto_5fexternal_2eproto__INCLUDED

#include "ueagents_envs/communicator_objects/unreal_to_external.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace communicator_objects {

class UnrealToExternalProto final {
 public:
  static constexpr char const* service_full_name() {
    return "communicator_objects.UnrealToExternalProto";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Sends the academy parameters
    virtual ::grpc::Status Exchange(::grpc::ClientContext* context, const ::communicator_objects::UnrealMessageProto& request, ::communicator_objects::UnrealMessageProto* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::communicator_objects::UnrealMessageProto>> AsyncExchange(::grpc::ClientContext* context, const ::communicator_objects::UnrealMessageProto& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::communicator_objects::UnrealMessageProto>>(AsyncExchangeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::communicator_objects::UnrealMessageProto>> PrepareAsyncExchange(::grpc::ClientContext* context, const ::communicator_objects::UnrealMessageProto& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::communicator_objects::UnrealMessageProto>>(PrepareAsyncExchangeRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Sends the academy parameters
      virtual void Exchange(::grpc::ClientContext* context, const ::communicator_objects::UnrealMessageProto* request, ::communicator_objects::UnrealMessageProto* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Exchange(::grpc::ClientContext* context, const ::communicator_objects::UnrealMessageProto* request, ::communicator_objects::UnrealMessageProto* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::communicator_objects::UnrealMessageProto>* AsyncExchangeRaw(::grpc::ClientContext* context, const ::communicator_objects::UnrealMessageProto& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::communicator_objects::UnrealMessageProto>* PrepareAsyncExchangeRaw(::grpc::ClientContext* context, const ::communicator_objects::UnrealMessageProto& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Exchange(::grpc::ClientContext* context, const ::communicator_objects::UnrealMessageProto& request, ::communicator_objects::UnrealMessageProto* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::communicator_objects::UnrealMessageProto>> AsyncExchange(::grpc::ClientContext* context, const ::communicator_objects::UnrealMessageProto& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::communicator_objects::UnrealMessageProto>>(AsyncExchangeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::communicator_objects::UnrealMessageProto>> PrepareAsyncExchange(::grpc::ClientContext* context, const ::communicator_objects::UnrealMessageProto& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::communicator_objects::UnrealMessageProto>>(PrepareAsyncExchangeRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Exchange(::grpc::ClientContext* context, const ::communicator_objects::UnrealMessageProto* request, ::communicator_objects::UnrealMessageProto* response, std::function<void(::grpc::Status)>) override;
      void Exchange(::grpc::ClientContext* context, const ::communicator_objects::UnrealMessageProto* request, ::communicator_objects::UnrealMessageProto* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::communicator_objects::UnrealMessageProto>* AsyncExchangeRaw(::grpc::ClientContext* context, const ::communicator_objects::UnrealMessageProto& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::communicator_objects::UnrealMessageProto>* PrepareAsyncExchangeRaw(::grpc::ClientContext* context, const ::communicator_objects::UnrealMessageProto& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Exchange_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Sends the academy parameters
    virtual ::grpc::Status Exchange(::grpc::ServerContext* context, const ::communicator_objects::UnrealMessageProto* request, ::communicator_objects::UnrealMessageProto* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Exchange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Exchange() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Exchange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Exchange(::grpc::ServerContext* /*context*/, const ::communicator_objects::UnrealMessageProto* /*request*/, ::communicator_objects::UnrealMessageProto* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExchange(::grpc::ServerContext* context, ::communicator_objects::UnrealMessageProto* request, ::grpc::ServerAsyncResponseWriter< ::communicator_objects::UnrealMessageProto>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Exchange<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Exchange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Exchange() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::communicator_objects::UnrealMessageProto, ::communicator_objects::UnrealMessageProto>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::communicator_objects::UnrealMessageProto* request, ::communicator_objects::UnrealMessageProto* response) { return this->Exchange(context, request, response); }));}
    void SetMessageAllocatorFor_Exchange(
        ::grpc::MessageAllocator< ::communicator_objects::UnrealMessageProto, ::communicator_objects::UnrealMessageProto>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::communicator_objects::UnrealMessageProto, ::communicator_objects::UnrealMessageProto>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Exchange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Exchange(::grpc::ServerContext* /*context*/, const ::communicator_objects::UnrealMessageProto* /*request*/, ::communicator_objects::UnrealMessageProto* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Exchange(
      ::grpc::CallbackServerContext* /*context*/, const ::communicator_objects::UnrealMessageProto* /*request*/, ::communicator_objects::UnrealMessageProto* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Exchange<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Exchange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Exchange() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Exchange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Exchange(::grpc::ServerContext* /*context*/, const ::communicator_objects::UnrealMessageProto* /*request*/, ::communicator_objects::UnrealMessageProto* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Exchange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Exchange() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Exchange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Exchange(::grpc::ServerContext* /*context*/, const ::communicator_objects::UnrealMessageProto* /*request*/, ::communicator_objects::UnrealMessageProto* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExchange(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Exchange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Exchange() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Exchange(context, request, response); }));
    }
    ~WithRawCallbackMethod_Exchange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Exchange(::grpc::ServerContext* /*context*/, const ::communicator_objects::UnrealMessageProto* /*request*/, ::communicator_objects::UnrealMessageProto* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Exchange(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Exchange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Exchange() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::communicator_objects::UnrealMessageProto, ::communicator_objects::UnrealMessageProto>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::communicator_objects::UnrealMessageProto, ::communicator_objects::UnrealMessageProto>* streamer) {
                       return this->StreamedExchange(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Exchange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Exchange(::grpc::ServerContext* /*context*/, const ::communicator_objects::UnrealMessageProto* /*request*/, ::communicator_objects::UnrealMessageProto* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExchange(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::communicator_objects::UnrealMessageProto,::communicator_objects::UnrealMessageProto>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Exchange<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Exchange<Service > StreamedService;
};

}  // namespace communicator_objects


#endif  // GRPC_ueagents_5fenvs_2fcommunicator_5fobjects_2funreal_5fto_5fexternal_2eproto__INCLUDED
