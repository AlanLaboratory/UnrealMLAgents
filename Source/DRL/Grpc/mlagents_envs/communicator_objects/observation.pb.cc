// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mlagents_envs/communicator_objects/observation.proto

#include "mlagents_envs/communicator_objects/observation.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace communicator_objects {
template <typename>
PROTOBUF_CONSTEXPR ObservationProto_FloatData::ObservationProto_FloatData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/ {}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ObservationProto_FloatDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObservationProto_FloatDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObservationProto_FloatDataDefaultTypeInternal() {}
  union {
    ObservationProto_FloatData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObservationProto_FloatDataDefaultTypeInternal _ObservationProto_FloatData_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ObservationProto::ObservationProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.shape_)*/ {}
  ,/* _impl_._shape_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.dimension_properties_)*/ {}
  ,/* _impl_._dimension_properties_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.observation_data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ObservationProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObservationProtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObservationProtoDefaultTypeInternal() {}
  union {
    ObservationProto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObservationProtoDefaultTypeInternal _ObservationProto_default_instance_;
}  // namespace communicator_objects
static ::_pb::Metadata file_level_metadata_mlagents_5fenvs_2fcommunicator_5fobjects_2fobservation_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_mlagents_5fenvs_2fcommunicator_5fobjects_2fobservation_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_mlagents_5fenvs_2fcommunicator_5fobjects_2fobservation_2eproto = nullptr;
const ::uint32_t TableStruct_mlagents_5fenvs_2fcommunicator_5fobjects_2fobservation_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::communicator_objects::ObservationProto_FloatData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::communicator_objects::ObservationProto_FloatData, _impl_.data_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::communicator_objects::ObservationProto, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::communicator_objects::ObservationProto, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::communicator_objects::ObservationProto, _impl_.shape_),
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::communicator_objects::ObservationProto, _impl_.dimension_properties_),
    PROTOBUF_FIELD_OFFSET(::communicator_objects::ObservationProto, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::communicator_objects::ObservationProto, _impl_.observation_data_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::communicator_objects::ObservationProto_FloatData)},
        { 9, -1, -1, sizeof(::communicator_objects::ObservationProto)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::communicator_objects::_ObservationProto_FloatData_default_instance_._instance,
    &::communicator_objects::_ObservationProto_default_instance_._instance,
};
const char descriptor_table_protodef_mlagents_5fenvs_2fcommunicator_5fobjects_2fobservation_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n4mlagents_envs/communicator_objects/obs"
    "ervation.proto\022\024communicator_objects\"\304\001\n"
    "\020ObservationProto\022\r\n\005shape\030\001 \003(\005\022F\n\nfloa"
    "t_data\030\002 \001(\01320.communicator_objects.Obse"
    "rvationProto.FloatDataH\000\022\034\n\024dimension_pr"
    "operties\030\003 \003(\005\022\014\n\004name\030\004 \001(\t\032\031\n\tFloatDat"
    "a\022\014\n\004data\030\001 \003(\002B\022\n\020observation_data*4\n\024O"
    "bservationTypeProto\022\013\n\007DEFAULT\020\000\022\017\n\013GOAL"
    "_SIGNAL\020\001b\006proto3"
};
static ::absl::once_flag descriptor_table_mlagents_5fenvs_2fcommunicator_5fobjects_2fobservation_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_mlagents_5fenvs_2fcommunicator_5fobjects_2fobservation_2eproto = {
    false,
    false,
    337,
    descriptor_table_protodef_mlagents_5fenvs_2fcommunicator_5fobjects_2fobservation_2eproto,
    "mlagents_envs/communicator_objects/observation.proto",
    &descriptor_table_mlagents_5fenvs_2fcommunicator_5fobjects_2fobservation_2eproto_once,
    nullptr,
    0,
    2,
    schemas,
    file_default_instances,
    TableStruct_mlagents_5fenvs_2fcommunicator_5fobjects_2fobservation_2eproto::offsets,
    file_level_metadata_mlagents_5fenvs_2fcommunicator_5fobjects_2fobservation_2eproto,
    file_level_enum_descriptors_mlagents_5fenvs_2fcommunicator_5fobjects_2fobservation_2eproto,
    file_level_service_descriptors_mlagents_5fenvs_2fcommunicator_5fobjects_2fobservation_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_mlagents_5fenvs_2fcommunicator_5fobjects_2fobservation_2eproto_getter() {
  return &descriptor_table_mlagents_5fenvs_2fcommunicator_5fobjects_2fobservation_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_mlagents_5fenvs_2fcommunicator_5fobjects_2fobservation_2eproto(&descriptor_table_mlagents_5fenvs_2fcommunicator_5fobjects_2fobservation_2eproto);
namespace communicator_objects {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObservationTypeProto_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mlagents_5fenvs_2fcommunicator_5fobjects_2fobservation_2eproto);
  return file_level_enum_descriptors_mlagents_5fenvs_2fcommunicator_5fobjects_2fobservation_2eproto[0];
}
bool ObservationTypeProto_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}
// ===================================================================

class ObservationProto_FloatData::_Internal {
 public:
};

ObservationProto_FloatData::ObservationProto_FloatData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:communicator_objects.ObservationProto.FloatData)
}
ObservationProto_FloatData::ObservationProto_FloatData(const ObservationProto_FloatData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ObservationProto_FloatData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_) { from._impl_.data_ }

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:communicator_objects.ObservationProto.FloatData)
}

inline void ObservationProto_FloatData::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.data_) { arena }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ObservationProto_FloatData::~ObservationProto_FloatData() {
  // @@protoc_insertion_point(destructor:communicator_objects.ObservationProto.FloatData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObservationProto_FloatData::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.~RepeatedField();
}

void ObservationProto_FloatData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObservationProto_FloatData::Clear() {
// @@protoc_insertion_point(message_clear_start:communicator_objects.ObservationProto.FloatData)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_data()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObservationProto_FloatData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated float data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 13) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ObservationProto_FloatData::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:communicator_objects.ObservationProto.FloatData)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float data = 1;
  if (this->_internal_data_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:communicator_objects.ObservationProto.FloatData)
  return target;
}

::size_t ObservationProto_FloatData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:communicator_objects.ObservationProto.FloatData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float data = 1;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_data_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObservationProto_FloatData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ObservationProto_FloatData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObservationProto_FloatData::GetClassData() const { return &_class_data_; }


void ObservationProto_FloatData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ObservationProto_FloatData*>(&to_msg);
  auto& from = static_cast<const ObservationProto_FloatData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:communicator_objects.ObservationProto.FloatData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObservationProto_FloatData::CopyFrom(const ObservationProto_FloatData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:communicator_objects.ObservationProto.FloatData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObservationProto_FloatData::IsInitialized() const {
  return true;
}

void ObservationProto_FloatData::InternalSwap(ObservationProto_FloatData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObservationProto_FloatData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mlagents_5fenvs_2fcommunicator_5fobjects_2fobservation_2eproto_getter, &descriptor_table_mlagents_5fenvs_2fcommunicator_5fobjects_2fobservation_2eproto_once,
      file_level_metadata_mlagents_5fenvs_2fcommunicator_5fobjects_2fobservation_2eproto[0]);
}
// ===================================================================

class ObservationProto::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::communicator_objects::ObservationProto, _impl_._oneof_case_);
  static const ::communicator_objects::ObservationProto_FloatData& float_data(const ObservationProto* msg);
};

const ::communicator_objects::ObservationProto_FloatData&
ObservationProto::_Internal::float_data(const ObservationProto* msg) {
  return *msg->_impl_.observation_data_.float_data_;
}
void ObservationProto::set_allocated_float_data(::communicator_objects::ObservationProto_FloatData* float_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_observation_data();
  if (float_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(float_data);
    if (message_arena != submessage_arena) {
      float_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, float_data, submessage_arena);
    }
    set_has_float_data();
    _impl_.observation_data_.float_data_ = float_data;
  }
  // @@protoc_insertion_point(field_set_allocated:communicator_objects.ObservationProto.float_data)
}
ObservationProto::ObservationProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:communicator_objects.ObservationProto)
}
ObservationProto::ObservationProto(const ObservationProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ObservationProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.shape_) { from._impl_.shape_ }
    ,/* _impl_._shape_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.dimension_properties_) { from._impl_.dimension_properties_ }
    ,/* _impl_._dimension_properties_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.name_) {}

    , decltype(_impl_.observation_data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  clear_has_observation_data();
  switch (from.observation_data_case()) {
    case kFloatData: {
      _this->_internal_mutable_float_data()->::communicator_objects::ObservationProto_FloatData::MergeFrom(
          from._internal_float_data());
      break;
    }
    case OBSERVATION_DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:communicator_objects.ObservationProto)
}

inline void ObservationProto::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.shape_) { arena }
    ,/* _impl_._shape_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.dimension_properties_) { arena }
    ,/* _impl_._dimension_properties_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.name_) {}

    , decltype(_impl_.observation_data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_observation_data();
}

ObservationProto::~ObservationProto() {
  // @@protoc_insertion_point(destructor:communicator_objects.ObservationProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObservationProto::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.shape_.~RepeatedField();
  _impl_.dimension_properties_.~RepeatedField();
  _impl_.name_.Destroy();
  if (has_observation_data()) {
    clear_observation_data();
  }
}

void ObservationProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObservationProto::clear_observation_data() {
// @@protoc_insertion_point(one_of_clear_start:communicator_objects.ObservationProto)
  switch (observation_data_case()) {
    case kFloatData: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.observation_data_.float_data_;
      }
      break;
    }
    case OBSERVATION_DATA_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = OBSERVATION_DATA_NOT_SET;
}


void ObservationProto::Clear() {
// @@protoc_insertion_point(message_clear_start:communicator_objects.ObservationProto)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_shape()->Clear();
  _internal_mutable_dimension_properties()->Clear();
  _impl_.name_.ClearToEmpty();
  clear_observation_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObservationProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 shape = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_shape(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 8) {
          _internal_add_shape(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .communicator_objects.ObservationProto.FloatData float_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_float_data(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated int32 dimension_properties = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_dimension_properties(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 24) {
          _internal_add_dimension_properties(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "communicator_objects.ObservationProto.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ObservationProto::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:communicator_objects.ObservationProto)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 shape = 1;
  {
    int byte_size = _impl_._shape_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(1, _internal_shape(),
                                                 byte_size, target);
    }
  }

  // .communicator_objects.ObservationProto.FloatData float_data = 2;
  if (observation_data_case() == kFloatData) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::float_data(this),
        _Internal::float_data(this).GetCachedSize(), target, stream);
  }

  // repeated int32 dimension_properties = 3;
  {
    int byte_size = _impl_._dimension_properties_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(3, _internal_dimension_properties(),
                                                 byte_size, target);
    }
  }

  // string name = 4;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "communicator_objects.ObservationProto.name");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:communicator_objects.ObservationProto)
  return target;
}

::size_t ObservationProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:communicator_objects.ObservationProto)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 shape = 1;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_shape())
    ;
    _impl_._shape_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // repeated int32 dimension_properties = 3;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_dimension_properties())
    ;
    _impl_._dimension_properties_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // string name = 4;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  switch (observation_data_case()) {
    // .communicator_objects.ObservationProto.FloatData float_data = 2;
    case kFloatData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.observation_data_.float_data_);
      break;
    }
    case OBSERVATION_DATA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObservationProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ObservationProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObservationProto::GetClassData() const { return &_class_data_; }


void ObservationProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ObservationProto*>(&to_msg);
  auto& from = static_cast<const ObservationProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:communicator_objects.ObservationProto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.shape_.MergeFrom(from._impl_.shape_);
  _this->_impl_.dimension_properties_.MergeFrom(from._impl_.dimension_properties_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  switch (from.observation_data_case()) {
    case kFloatData: {
      _this->_internal_mutable_float_data()->::communicator_objects::ObservationProto_FloatData::MergeFrom(
          from._internal_float_data());
      break;
    }
    case OBSERVATION_DATA_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObservationProto::CopyFrom(const ObservationProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:communicator_objects.ObservationProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObservationProto::IsInitialized() const {
  return true;
}

void ObservationProto::InternalSwap(ObservationProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.shape_.InternalSwap(&other->_impl_.shape_);
  _impl_.dimension_properties_.InternalSwap(&other->_impl_.dimension_properties_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  swap(_impl_.observation_data_, other->_impl_.observation_data_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObservationProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mlagents_5fenvs_2fcommunicator_5fobjects_2fobservation_2eproto_getter, &descriptor_table_mlagents_5fenvs_2fcommunicator_5fobjects_2fobservation_2eproto_once,
      file_level_metadata_mlagents_5fenvs_2fcommunicator_5fobjects_2fobservation_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace communicator_objects
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::communicator_objects::ObservationProto_FloatData*
Arena::CreateMaybeMessage< ::communicator_objects::ObservationProto_FloatData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::communicator_objects::ObservationProto_FloatData >(arena);
}
template<> PROTOBUF_NOINLINE ::communicator_objects::ObservationProto*
Arena::CreateMaybeMessage< ::communicator_objects::ObservationProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::communicator_objects::ObservationProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
